#include "bark.h"

#include <cstdio>
#include <string>
#include <map>
#include <random>
#include <vector>

static const std::map<bark_codes, bark_codes> & k_tests()
{
    static const bark_codes seq1 = {
        { 62, 121, 62, 635, 635, 537, 676, 635, 537, 208, 676, 676, 635, 879, 676, 635, 635, 208, 676, 635, 635, 819, 676, 635, 635, 676, 676, 635, 635, 879, 676, 676, 635, 676, 676, 635, 635, 676, 676, 635, 635, 208, 676, 635, 635, 676, 676, 635, 635, 676, 753, 635, 635, 860, 676, 635, 635, 208, 676, 635, 635, 860, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 208, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676 },
        { 913, 424, 424, 894, 980, 964, 458, 994, 516, 200, 516, 959, 458, 687, 894, 959, 516, 200, 516, 176, 458, 964, 894, 496, 516, 687, 516, 176, 743, 462, 894, 897, 516, 687, 673, 176, 743, 777, 516, 811, 516, 200, 488, 964, 743, 571, 894, 897, 516, 687, 896, 964, 743, 200, 531, 897, 516, 200, 896, 964, 743, 802, 531, 897, 516, 687, 896, 964, 743, 673, 894, 811, 516, 200, 896, 964, 743, 673, 894, 897, 516, 820, 896, 176, 743, 673, 894, 811, 516, 687, 896, 176, 743, 462, 894, 687, 516, 820, 896, 176, 743, 462, 894, 811, 516, 687, 896, 888, 743, 462, 894, 687, 516, 687, 896, 964, 743, 673, 894, 897, 516, 894, 896, 964, 743, 673, 894, 687, 516, 820, 896, 964, 743, 462, 894, 897, 516, 687, 896, 687, 743, 673, 894, 687, 516, 820, 896, 964, 743, 462, 894, 897, 516, 687, 896, 964, 743, 673, 894, 687, 516, 826, 896, 964, 743, 462, 894, 687, 516, 687, 896, 964, 743, 673, 894, 897, 516, 826, 896, 964, 743, 462, 894, 897, 516, 777, 896, 964, 743, 673, 894, 897, 516, 826, 896, 964, 743, 673, 894, 897, 516, 894, 896, 964, 743, 462, 894, 897, 516, 820, 896, 176, 743, 673, 894, 897, 516, 687, 896, 964, 743, 462, 894, 687, 516, 687, 896, 964, 743, 462, 894 }
    };
    static const bark_codes seq2 = {
        {},
        {}
    };
    static const bark_codes seq3 = {
        {},
        {}
    };

    static const bark_codes ans1 = {
        { 62, 121, 62, 635, 635, 537, 676, 635, 537, 208, 676, 676, 635, 879, 676, 635, 635, 208, 676, 635, 635, 819, 676, 635, 635, 676, 676, 635, 635, 879, 676, 676, 635, 676, 676, 635, 635, 676, 676, 635, 635, 208, 676, 635, 635, 676, 676, 635, 635, 676, 753, 635, 635, 860, 676, 635, 635, 208, 676, 635, 635, 860, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 208, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 777, 676, 635, 635, 777, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676, 635, 635, 676, 676 },
        { 913, 424, 424, 894, 980, 964, 458, 994, 516, 200, 516, 959, 458, 687, 894, 959, 516, 200, 516, 176, 458, 964, 894, 496, 516, 687, 516, 176, 743, 462, 894, 897, 516, 687, 673, 176, 743, 777, 516, 811, 516, 200, 488, 964, 743, 571, 894, 897, 516, 687, 896, 964, 743, 200, 531, 897, 516, 200, 896, 964, 743, 802, 531, 897, 516, 687, 896, 964, 743, 673, 894, 811, 516, 200, 896, 964, 743, 673, 894, 897, 516, 820, 896, 176, 743, 673, 894, 811, 516, 687, 896, 176, 743, 462, 894, 687, 516, 820, 896, 176, 743, 462, 894, 811, 516, 687, 896, 888, 743, 462, 894, 687, 516, 687, 896, 964, 743, 673, 894, 897, 516, 894, 896, 964, 743, 673, 894, 687, 516, 820, 896, 964, 743, 462, 894, 897, 516, 687, 896, 687, 743, 673, 894, 687, 516, 820, 896, 964, 743, 462, 894, 897, 516, 687, 896, 964, 743, 673, 894, 687, 516, 826, 896, 964, 743, 462, 894, 687, 516, 687, 896, 964, 743, 673, 894, 897, 516, 826, 896, 964, 743, 462, 894, 897, 516, 777, 896, 964, 743, 673, 894, 897, 516, 826, 896, 964, 743, 673, 894, 897, 516, 894, 896, 964, 743, 462, 894, 897, 516, 820, 896, 176, 743, 673, 894, 897, 516, 687, 896, 964, 743, 462, 894, 687, 516, 687, 896, 964, 743, 462, 894 },
        { 786, 36, 786, 819, 710, 767, 39, 880, 894, 879, 752, 238, 1007, 675, 126, 879, 1007, 710, 675, 933, 982, 767, 982, 880, 861, 863, 878, 818, 126, 255, 982, 253, 861, 238, 692, 880, 126, 675, 39, 893, 967, 710, 982, 819, 126, 675, 982, 936, 967, 863, 414, 1000, 126, 767, 936, 936, 675, 710, 815, 829, 752, 710, 856, 936, 967, 1007, 1007, 670, 126, 937, 982, 711, 675, 846, 818, 967, 752, 767, 982, 1000, 675, 861, 1007, 1016, 752, 767, 982, 1015, 675, 863, 1007, 1016, 126, 829, 982, 604, 861, 829, 1007, 1016, 126, 829, 982, 653, 861, 863, 1007, 253, 126, 936, 982, 604, 967, 1007, 815, 705, 126, 414, 982, 752, 967, 829, 815, 967, 752, 937, 982, 604, 675, 861, 692, 818, 752, 936, 982, 967, 675, 1007, 982, 39, 752, 414, 982, 604, 675, 861, 815, 819, 863, 365, 982, 936, 675, 863, 692, 458, 710, 767, 982, 604, 967, 936, 815, 967, 647, 936, 797, 967, 790, 1007, 815, 967, 752, 414, 982, 936, 675, 38, 982, 967, 982, 970, 982, 936, 675, 863, 705, 967, 863, 829, 982, 819, 675, 38, 818, 967, 126, 767, 8, 967, 675, 767, 893, 818, 710, 837, 982, 752, 675, 861, 1007, 818, 126, 863, 982, 936, 675, 863, 1007, 967, 126, 710, 982, 604, 861, 1007, 432, 863, 710, 837, 8 },
        { 673, 673, 673, 830, 933, 983, 854, 714, 859, 983, 933, 674, 854, 854, 74, 104, 1014, 854, 1022, 776, 854, 364, 962, 757, 1014, 388, 714, 830, 714, 830, 762, 364, 288, 956, 866, 104, 993, 364, 859, 922, 734, 670, 734, 830, 74, 714, 734, 830, 734, 388, 962, 859, 74, 1014, 962, 830, 36, 670, 854, 558, 558, 962, 733, 830, 714, 315, 962, 838, 74, 859, 734, 859, 36, 945, 962, 859, 866, 983, 734, 1022, 36, 1022, 962, 830, 962, 983, 762, 922, 36, 388, 962, 830, 74, 388, 854, 859, 288, 714, 931, 830, 779, 388, 734, 1022, 916, 388, 962, 74, 74, 388, 734, 859, 714, 315, 838, 830, 74, 859, 734, 830, 779, 859, 838, 830, 558, 831, 734, 859, 487, 835, 962, 830, 962, 487, 762, 830, 36, 859, 962, 104, 962, 859, 734, 859, 36, 835, 854, 558, 962, 388, 734, 1022, 36, 487, 962, 830, 854, 983, 734, 859, 714, 983, 838, 859, 1019, 487, 734, 757, 1016, 315, 854, 830, 962, 859, 734, 288, 36, 859, 962, 830, 1014, 388, 734, 288, 36, 983, 962, 859, 854, 831, 734, 830, 36, 859, 962, 830, 74, 854, 956, 1014, 36, 74, 962, 830, 1014, 388, 734, 830, 36, 793, 838, 830, 239, 831, 734, 104, 36, 388, 962, 830, 74, 779, 915, 859, 779, 859, 962, 830, 1014, 388, 956 },
        { 528, 448, 622, 989, 652, 537, 100, 909, 454, 446, 928, 652, 271, 907, 652, 646, 271, 831, 652, 652, 271, 446, 606, 930, 446, 446, 904, 537, 446, 907, 652, 922, 446, 15, 606, 680, 271, 963, 446, 537, 271, 884, 831, 454, 446, 983, 694, 680, 963, 446, 375, 446, 446, 963, 989, 271, 963, 884, 928, 882, 446, 652, 989, 446, 446, 15, 904, 606, 446, 907, 989, 909, 963, 908, 694, 446, 446, 652, 831, 680, 963, 884, 904, 446, 885, 446, 736, 446, 963, 680, 904, 446, 446, 652, 736, 537, 831, 831, 904, 831, 912, 652, 989, 909, 963, 446, 904, 646, 446, 652, 989, 742, 963, 930, 446, 446, 271, 969, 831, 831, 963, 963, 694, 446, 446, 939, 831, 446, 804, 5, 983, 454, 885, 884, 537, 271, 446, 930, 446, 446, 446, 969, 989, 694, 446, 680, 928, 446, 831, 652, 831, 909, 963, 930, 537, 446, 885, 652, 831, 505, 963, 983, 928, 271, 680, 930, 606, 446, 111, 876, 928, 446, 885, 969, 446, 446, 963, 877, 446, 454, 378, 652, 831, 884, 963, 446, 446, 446, 928, 652, 831, 983, 963, 990, 375, 271, 446, 652, 694, 884, 963, 963, 375, 454, 885, 604, 694, 983, 963, 680, 652, 515, 680, 939, 989, 680, 963, 694, 904, 454, 446, 652, 446, 271, 963, 963, 375, 946, 885, 446, 694 },
        { 1011, 881, 986, 412, 885, 903, 16, 781, 178, 41, 10, 903, 505, 299, 293, 995, 683, 929, 742, 350, 683, 683, 293, 140, 826, 41, 742, 903, 398, 683, 10, 632, 768, 683, 742, 929, 971, 971, 956, 300, 683, 561, 461, 903, 851, 929, 781, 567, 567, 768, 778, 929, 851, 505, 1005, 903, 41, 561, 995, 963, 683, 946, 742, 826, 683, 929, 567, 549, 701, 929, 41, 781, 386, 818, 350, 863, 494, 293, 778, 826, 701, 10, 567, 903, 683, 293, 963, 690, 386, 885, 567, 903, 683, 293, 435, 567, 683, 701, 778, 903, 632, 390, 742, 903, 903, 768, 567, 386, 701, 684, 742, 824, 701, 683, 995, 903, 683, 885, 778, 701, 505, 742, 16, 826, 801, 781, 778, 929, 683, 781, 505, 903, 683, 1011, 546, 546, 683, 683, 956, 946, 683, 885, 742, 824, 683, 863, 995, 929, 561, 1011, 778, 185, 386, 963, 505, 903, 567, 293, 41, 824, 505, 561, 923, 386, 683, 963, 742, 928, 683, 683, 923, 946, 683, 885, 742, 742, 701, 477, 41, 946, 683, 851, 41, 1003, 963, 818, 1005, 863, 683, 963, 778, 903, 701, 293, 350, 386, 971, 632, 995, 701, 683, 567, 963, 903, 293, 19, 781, 903, 701, 602, 778, 923, 632, 768, 742, 929, 611, 768, 567, 929, 683, 975, 742, 742, 505, 1011, 692, 929, 781, 634, 929 },
        { 1002, 900, 1002, 380, 316, 983, 860, 32, 406, 547, 764, 996, 983, 606, 444, 243, 674, 764, 764, 406, 977, 547, 243, 628, 772, 547, 628, 764, 406, 243, 444, 834, 772, 510, 628, 755, 936, 243, 748, 418, 528, 243, 406, 406, 547, 243, 406, 406, 243, 528, 464, 940, 853, 243, 406, 908, 243, 243, 628, 406, 860, 342, 764, 485, 547, 628, 628, 36, 562, 243, 628, 866, 983, 887, 628, 406, 866, 433, 908, 585, 528, 755, 628, 406, 782, 243, 628, 406, 291, 528, 628, 406, 866, 983, 628, 786, 874, 243, 628, 406, 547, 983, 628, 406, 547, 243, 628, 406, 562, 871, 628, 994, 528, 628, 444, 406, 562, 501, 628, 406, 866, 243, 628, 485, 871, 291, 772, 993, 675, 628, 406, 406, 528, 647, 764, 782, 464, 243, 993, 444, 464, 628, 628, 994, 464, 628, 628, 406, 983, 983, 628, 406, 291, 528, 585, 389, 860, 528, 628, 994, 764, 243, 628, 694, 660, 464, 406, 360, 606, 628, 628, 406, 528, 15, 764, 755, 243, 764, 406, 406, 1015, 871, 406, 755, 291, 887, 628, 406, 860, 433, 628, 908, 764, 243, 628, 772, 243, 871, 406, 406, 983, 243, 628, 928, 364, 243, 628, 406, 464, 585, 748, 406, 464, 243, 628, 993, 764, 243, 628, 406, 562, 625, 406, 562, 994, 628, 628, 406, 552, 243, 866 },
        { 899, 518, 948, 173, 416, 173, 622, 383, 989, 700, 988, 851, 639, 343, 931, 931, 628, 931, 416, 138, 416, 937, 700, 416, 42, 937, 639, 931, 845, 416, 322, 416, 1019, 828, 700, 835, 416, 988, 845, 237, 931, 937, 455, 1012, 989, 988, 700, 590, 931, 997, 835, 583, 336, 924, 416, 416, 989, 937, 835, 173, 845, 416, 622, 173, 989, 700, 558, 1019, 1019, 701, 416, 309, 309, 1019, 937, 1012, 568, 701, 233, 660, 845, 701, 701, 937, 416, 1018, 989, 660, 416, 660, 701, 173, 931, 658, 989, 1012, 475, 924, 832, 173, 931, 1019, 135, 693, 416, 246, 701, 1019, 845, 468, 416, 988, 989, 322, 937, 475, 416, 416, 233, 1012, 989, 639, 937, 700, 336, 472, 233, 693, 475, 458, 1012, 965, 617, 835, 1018, 931, 354, 1019, 1012, 558, 701, 416, 937, 737, 828, 416, 835, 1019, 354, 1019, 233, 628, 988, 559, 173, 965, 940, 416, 558, 845, 416, 309, 558, 475, 768, 505, 701, 947, 1019, 937, 107, 835, 336, 534, 768, 828, 989, 354, 845, 416, 416, 658, 1012, 647, 931, 845, 937, 1012, 845, 472, 233, 845, 845, 173, 845, 416, 516, 416, 1019, 845, 1013, 931, 835, 878, 940, 1004, 700, 416, 416, 416, 173, 1013, 416, 937, 135, 1012, 899, 559, 701, 475, 845, 1019, 598, 672, 568, 931, 416, 947, 931, 558, 1019 },
    };
    static const bark_codes ans2 = {
        {},
        {}
    };
    static const bark_codes ans3 = {
        {},
        {}
    };

    static std::map<bark_codes, bark_codes> _k_tests = {
        { seq1, ans1 },  // hello world
    };
    return _k_tests;
};

int main(int argc, char** argv) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <model-file>\n", argv[0]);
        return 1;
    }

    const std::string fname = argv[1];

    gpt_model model;
    std::mt19937 rng(0);

    const int   n_threads = 4;
    const float temp      = 0.0f;  // deterministic sampling

    printf("%s: reading bark coarse model\n", __func__);
    if(!gpt_model_load(fname, model)) {
        fprintf(stderr, "%s: invalid model file '%s'\n", __func__, fname.c_str());
        return 1;
    }

    for (const auto & test_kv : k_tests()) {
        bark_codes res = bark_forward_fine_encoder(
            test_kv.first, model, rng, n_threads, temp);

        bool correct = res.size() == test_kv.second.size();

        for (int i = 0; i < 3 && correct; ++i) {
            correct = res[i].size() == test_kv.second[i].size();
            for (int j = 0; j < (int) res[i].size() && correct; j++) {
                if (res[i][j] != test_kv.second[i][j]) {
                    correct = false;
                }
            }
        }

        if (!correct) {
            fprintf(stderr, "%s : failed test \n", __func__);
            fprintf(stderr, "%s : expected tokens (n=%zu): ", __func__, test_kv.second.size());
            for (int i = 0; i < 3; i++) {  // 2 because we can't visualize all codes
                for (int j = 0; j < (int) test_kv.second[i].size(); j++) {
                    if (test_kv.second[i][j] != res[i][j]) {
                        fprintf(stderr, "**%d** ", test_kv.second[i][j]);
                    } else {
                        fprintf(stderr, "%d ", test_kv.second[i][j]);
                    }
                }
                fprintf(stderr, "\n");
            }
            fprintf(stderr, "\n");
            fprintf(stderr, "%s : got tokens (n=%zu):      ", __func__, res.size());
            for (int i = 0; i < 3; i++) {  // 2 because we can't visualize all codes
                for (int j = 0; j < (int) res[i].size(); j++) {
                    fprintf(stderr, "%d ", res[i][j]);
                }
                fprintf(stderr, "\n");
            }
            fprintf(stderr, "\n");

            return 3;
        }
    }

    fprintf(stderr, "%s : tests passed successfully.\n", __func__);

    return 0;
}
