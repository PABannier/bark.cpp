/* These tests test the forward pass of the GPT models as defined in the `gpt_eval`
function. The purpose of these tests is to isolate the `gpt_eval` function to test
whether it outputs the correct logits from a pre-defined input: the (padded) sequence
of tokens.

Only the first and last 50 *relevant logits* are tested.
*/
#include <cstdio>
#include <string>
#include <tuple>
#include <random>
#include <vector>

#include "bark.h"
#include "common.h"

static const std::vector<std::tuple<bark_sequence, logit_sequence>> & k_tests()
{
    static std::vector<std::tuple<bark_sequence, logit_sequence>> _k_tests;

    // test 1: hello world
    {
        bark_sequence input = {
            215,  1988,  3275,  1898,  1898,  1898,  9372,  9372,   222,   334,
            8568,  8568,  7963,   222,  8568,    55,  7963,  1270,    55,  1283,
            1283,   222,  1283,  1283,  1283,    55,  1283,  5960,  5960,  5960,
            5960,  5960,  5960,  5960,   231,  5960,  5960,  5960,  5960,  5960,
            5960,  5960,  5960,  5960,  5960,  5960,  5960,  5960,   340,  5960,
            5960,  5960,  5960,  1374,  4193,  4193,  9323,  1374,  1374,  1374,
            1374,  4193,  1374,  4193,  1374,  1374,  4193,  1374,   231,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  8328,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  9318,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
            1374,  1374,  1374,  1374, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12050 };

        logit_sequence first = {
            -0.2504, -0.8357, -0.7817, -3.4325, -1.3497, -0.0246, -3.9537,  1.0414,
            -4.8329, -1.3045, -1.6172, -2.0307, -3.4241, -0.3468, -1.1227, -4.1510,
            -0.9693, -1.2971, -2.4425, -2.2676, -2.4385, -2.1456, -1.0770,  4.3147,
            -0.3306,  7.6165, -2.2822,  0.0097, -3.2219, -0.9281, -0.0448, -1.8040,
            -0.3715, -0.9066, -1.1935,  1.0319, -2.2509, -3.0084,  3.5436, -2.4745,
            1.0158, -0.8026, -0.9665, -2.9495, -0.0318, -1.0646, -0.8192,  2.3201,
            -3.5992, -6.0473
        };

        logit_sequence last = {
            -0.0447,  -2.0397,   4.3142,   0.0667,  -2.9984,   2.9137,  -2.0471,
            -1.0145,   2.3341,  -0.6549,  -1.6525,   1.1172,  -0.3786,  -2.6145,
            -0.7574,  -0.4769,  -1.5991,   0.9172,  -1.3099,   0.4555,  -1.1762,
            -1.6306,  -1.9082,  -4.4277,  -3.5168,   4.8780,  -1.2237,   2.2364,
            -1.9533,  -1.4511,   1.3850,  -7.2282,  -2.1588,  -0.6294,   2.6044,
            -4.0282,   2.3695,   3.3589,  -4.5038,  -4.8646,   1.2393, -22.4992,
            -2.1164,   6.5350,  -1.5946,   6.6539,  -2.5565,  -0.2885,   3.6583,
            -1.7904
        };

        first.insert(first.end(), last.begin(), last.end());
        _k_tests.push_back({input, first});
    }

    // test 2: this is an audio
    {
        bark_sequence input = {
            59,    28,    28,   107,  7409,  1999,  7695,  6486,  6486,  5836,
            5836,  5836,   873,  2585,    92,    92,    59,    28,    28,   107,
            315,  5623,  1025,    10,   173,   125,  7385,   147,   147,  3689,
            302,  9600,  6876,  6876,   321,    41,   164,  1367,   739,    41,
            10,   140,   140,  6202,  6051,  6051,  4071,  9804,  8583,   677,
                3,    17,   113,  9414,  5419,  5419,  3831,  3663,  3663,  3663,
            2224,  2224,  2224,    73,  9144,  9144,  1667,  1997,  1957,  1093,
            825,   175,   175,  1087,   736,  1233,   230,   147,   147,   230,
            230,   230,   230,   230,   528,   528,   528,   528,   528,   528,
            528,   528,   528,   528,   528,   528,   528,   528,   528,  1613,
            528,  1613,  1613,  1613,  1613,  1613,  1613,  1613,  1613,  1613,
            1613,  1613,  2009,  2009, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048, 12048,
            12048, 12048, 12048, 12048, 12048, 12048, 12050
        };

        logit_sequence first = {
            -3.2111, -2.9846, -4.4002,  0.1862, -5.2959, -3.2299, -2.0699, -2.3488,
            -2.7988, -2.6839, -2.5216,  0.7862, -0.3446, -1.8391, -3.7891, -2.1021,
            -2.3442, -1.8413, -2.0903, -1.1934,  0.8364, -3.7628,  0.0216,  1.9404,
            1.6417,  4.8788, -4.0195, -2.4485, -2.2114, -4.2915,  2.9779, -3.5822,
            -2.9782, -4.2418, -6.6339,  1.7329, -2.9857, -4.2532,  4.7285, -1.5513,
            -0.4349,  0.8008, -1.9795, -0.7601, -0.9440, -3.4667, -2.7599, 11.8466,
            -1.8211, -6.2314
        };

        logit_sequence last = {
            -5.4036,  -3.4670,   4.0074,  -0.6634,  -1.0202,   4.8482,  -2.8942,
            -3.3936,  -2.4440,   1.1304,  -0.4888,   2.5303,  -2.9024,  -1.6714,
            5.6698,  -3.1946,  -1.0158,  -1.6482,  -3.2271,  -2.9323,   0.6481,
            -1.8072,  -1.6157,  -3.7798,  -1.5985,   0.2432,  -2.6326,   2.2218,
            -2.0211,  -0.8663,   0.2442,  -7.2844,  -3.6902,  -5.5932,  -0.0546,
            -2.5211,   3.1940,   1.8410,  -1.6439,  -6.5395,   6.3495, -21.6079,
            -2.8748,   2.1968,  -2.1888,   3.0346,   0.3948,  -2.5029,   0.2637,
            0.4201
        };

        first.insert(first.end(), last.begin(), last.end());
        _k_tests.push_back({input, first});
    }

    return _k_tests;
};

int main(int argc, char** argv) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <model-file>\n", argv[0]);
        return 1;
    }

    const std::string fname = argv[1];

    gpt_model model;
    const int n_threads = 4;

    size_t mem_per_token = 0;

    logit_sequence logits;

    printf("%s: reading bark coarse model\n", __func__);
    if(!gpt_model_load(fname, model)) {
        fprintf(stderr, "%s: invalid model file '%s'\n", __func__, fname.c_str());
        return 1;
    }

    // dry run to estimate mem_per_token
    gpt_eval(model, n_threads, 0, false, { 0, 1, 2, 3 }, logits, mem_per_token);

    for (const auto & test_data : k_tests()) {
        bark_sequence input = std::get<0>(test_data);

        gpt_eval(model, n_threads, 0, false, input, logits, mem_per_token);

        // take 10000 to 11024 indices to have the relevant logits (first pass)
        logit_sequence relevant_logits(logits.begin() + 10000, logits.begin() + 11024);

        if (!run_test(std::get<1>(test_data), relevant_logits, false)) {
            return 3;
        }
    }

    fprintf(stderr, "%s : tests passed successfully.\n", __func__);

    return 0;
}
