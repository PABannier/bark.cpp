#include "bark.h"

#include <cstdio>
#include <string>
#include <map>
#include <random>
#include <vector>

static const std::map<bark_sequence, bark_codes> & k_tests()
{
    static const bark_sequence seq1 = { 215, 1988, 3275, 1898, 1898, 1898, 9372, 9372, 222, 334, 8568, 8568, 7963, 222, 8568,  55, 7963, 1270,  55, 1283, 1283, 222, 1283, 1283, 1283,  55, 1283, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 231, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 5960, 340, 5960, 5960, 5960, 5960, 1374, 4193, 4193, 9323, 1374, 1374, 1374, 1374, 4193, 1374, 4193, 1374, 1374, 4193, 1374, 231, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 8328, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 9318, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 };
    static const bark_sequence seq2 = { 59, 28, 28, 107, 7409, 1999, 7695, 6486, 6486, 5836, 5836, 5836, 873, 2585, 92, 92, 59, 28, 28, 107, 315, 5623, 1025, 10, 173, 125, 7385, 147, 147, 3689, 302, 9600, 6876, 6876, 321, 41, 164, 1367, 739, 41, 10, 140, 140, 6202, 6051, 6051, 4071, 9804, 8583, 677, 3, 17, 113, 9414, 5419, 5419, 3831, 3663, 3663, 3663, 2224, 2224, 2224, 73, 9144, 9144, 1667, 1997, 1957, 1093, 825, 175, 175, 1087, 736, 1233, 230, 147, 147, 230, 230, 230, 230, 230, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1613, 528, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 2009, 2009 };
    static const bark_sequence seq3 = { 10, 10, 560, 10, 9602, 10, 10, 10, 302, 2363, 2919, 6860, 5127, 7134, 7134, 3934, 3934, 3352, 3352, 3507, 50, 10, 27, 27, 3320, 6107, 9891, 9891, 9891, 321, 41, 4287, 5667, 6152, 6152, 557, 1228, 12, 12, 200, 59, 28, 28, 28, 28, 1133, 9569, 5920, 1424, 1424, 51, 51, 682, 3820, 2107, 6059, 348, 210, 10, 10, 5, 2187, 7842, 988, 1728, 1728, 438, 366, 50, 27, 27, 181, 181, 7352, 9725, 4431, 6445, 2428, 41, 41, 41, 5119, 6557, 4212, 3963, 26, 26, 934, 1025, 1024, 173, 10, 41, 5467, 6684, 6684, 6684, 4958, 41, 298, 5982, 5982, 526, 3219, 122, 181, 10, 10, 884, 3446, 2599, 4478, 4478, 2549 };

    static const bark_codes ans1 = {
        { 62,  62,  62, 408, 835, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475 },
        { 913, 424, 424, 544, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519 }
    };
    static const bark_codes ans2 = {
        { 160, 160, 160, 160, 160, 709, 709, 945, 977, 1004, 925, 977, 185, 185, 1004, 925, 977, 925, 530, 565, 530, 360, 360, 360, 160, 160, 160, 160, 160, 709, 709, 855, 738, 408, 408, 408, 408, 408, 62, 62, 62, 62, 62, 62, 62, 62, 62, 372, 233, 1008, 321, 491, 871, 699, 323, 192, 106, 106, 408, 408, 408, 408, 393, 106, 203, 203, 203, 203, 203, 747, 747, 747, 747, 747, 192, 879, 931, 502, 151, 151, 151, 151, 151, 151, 151, 151, 833, 950, 658, 961, 192, 192, 192, 901, 901, 901, 11, 11, 11, 11, 11, 523, 155, 871, 871, 491, 604, 432, 430, 404, 738, 408, 408, 408, 408, 408, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62 },
        { 926, 926, 926, 926, 926, 747, 43, 43, 995, 257, 864, 995, 828, 811, 872, 864, 350, 350, 569, 306, 569, 306, 559, 845, 926, 926, 926, 926, 926, 747, 646, 913, 913, 518, 518, 544, 544, 913, 424, 424, 424, 424, 424, 424, 424, 424, 424, 347, 347, 347, 782, 770, 564, 71, 920, 685, 1007, 1007, 1007, 518, 518, 518, 984, 969, 984, 386, 386, 386, 386, 33, 863, 15, 1014, 1014, 281, 462, 870, 987, 987, 726, 868, 726, 888, 726, 888, 726, 52, 909, 772, 460, 511, 726, 281, 89, 834, 836, 127, 943, 6, 584, 485, 799, 868, 350, 619, 969, 969, 969, 969, 404, 969, 969, 518, 518, 913, 913, 424, 424, 424, 424, 424, 424, 424, 424, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518 }
    };
    static const bark_codes ans3 = {
        { 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 1014, 1014, 940, 940, 141, 141, 141, 141, 85,  85,  95, 213, 428, 428, 428, 428, 393, 393, 393, 393, 393, 785, 794, 940, 409, 409, 141, 141, 141,  85, 275, 275, 275, 192,  85,  85,  85,  85,  85,  85,  85, 1014, 393, 393, 393, 1014, 934, 934, 934, 934, 934, 934, 934, 934, 934, 194, 1014, 372, 233, 233, 233, 233, 233, 233, 233, 233,  59,  59,  59,  59, 192, 393, 393, 393, 393, 393, 393, 125, 496, 1014, 666, 409, 141, 141, 141, 141, 317, 666, 393, 393, 393, 393, 393, 1014, 1014, 1014, 1014, 1014, 747, 747, 747, 747, 747, 275, 393, 275, 275, 275, 275, 141, 141, 940, 940, 940, 940, 940, 940, 940, 393, 393, 393, 393, 393, 393, 393, 393, 141, 141, 141, 141, 141, 141,  59, 393, 275, 275, 141, 141, 940, 940, 940, 940, 1014, 393, 393, 393, 393, 393, 393, 1014, 1014, 141, 141, 141, 141, 141, 141 },
        { 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 636, 636, 636, 636, 160, 160, 645, 645, 636, 602, 243, 243, 243, 1010, 964, 964, 964, 964, 964, 806, 964, 794, 964, 964,  4,  4,  4,  4, 4, 920, 920, 920, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 4,  71,  71,  71,  74, 282, 282, 282, 282, 282, 282, 282, 282, 282, 458, 743, 834, 834, 834, 493, 493, 493, 493, 493, 493, 271, 271, 271, 271,  4, 888, 888, 888, 888, 888, 888, 481, 868, 888, 888, 888,  4,  4,  4, 4, 1001,  4, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 1010, 638, 638, 638, 1010, 888, 888, 888, 888, 888, 888, 241, 602, 602, 636, 636, 636, 636, 636, 636, 888, 888, 888, 888, 888, 888, 888, 888, 806, 241, 241, 241, 241,  4,  4, 964, 964, 964,  4, 602, 636, 636, 636, 636, 636, 964, 964, 964, 964, 964, 964, 964, 964, 268, 268, 268, 268, 268, 268 }
    };

    static std::map<bark_sequence, bark_codes> _k_tests = {
        { seq1, ans1 },  // hello world
        // { seq2, ans2 },  // this is an audio
        // { seq3, ans3 },  // You cannot, sir, take from me anything
    };
    return _k_tests;
};

int main(int argc, char** argv) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <model-file>\n", argv[0]);
        return 1;
    }

    const std::string fname = argv[1];

    gpt_model model;
    std::mt19937 rng(0);

    const int   n_threads = 4;
    const float temp      = 0.0f;  // deterministic sampling

    const int max_coarse_history  = 630;
    const int sliding_window_size = 60;

    printf("%s: reading bark coarse model\n", __func__);
    if(!gpt_model_load(fname, model)) {
        fprintf(stderr, "%s: invalid model file '%s'\n", __func__, fname.c_str());
        return 1;
    }

    for (const auto & test_kv : k_tests()) {
        bark_codes res = bark_forward_coarse_encoder(
            test_kv.first, model, rng, n_threads, temp, max_coarse_history, sliding_window_size);

        bool correct = res.size() == test_kv.second.size();

        for (int i = 0; i < (int) res.size() && correct; ++i) {
            correct = res[i].size() == test_kv.second[i].size();
            for (int j = 0; j < (int) res[i].size() && correct; j++) {
                if (res[i][j] != test_kv.second[i][j]) {
                    correct = false;
                }
            }
        }

        if (!correct) {
            fprintf(stderr, "%s : failed test \n", __func__);
            fprintf(stderr, "%s : expected tokens (n=%zu): ", __func__, test_kv.second.size());
            for (int i = 0; i < (int) test_kv.second.size(); i++) {
                for (int j = 0; j < (int) test_kv.second[i].size(); j++) {
                    fprintf(stderr, "%d ", test_kv.second[i][j]);
                }
                fprintf(stderr, "\n");
            }
            fprintf(stderr, "\n");
            fprintf(stderr, "%s : got tokens (n=%zu):      ", __func__, res.size());
            for (int i = 0; i < (int) res.size(); i++) {
                for (int j = 0; j < (int) res[i].size(); j++) {
                    fprintf(stderr, "%d ", res[i][j]);
                }
                fprintf(stderr, "\n");
            }
            fprintf(stderr, "\n");

            return 3;
        }
    }

    fprintf(stderr, "%s : tests passed successfully.\n", __func__);

    return 0;
}
